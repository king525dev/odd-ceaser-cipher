import { exec } from 'child_process';
import { Options } from './Options';
export declare const execAsync: typeof exec.__promisify__;
/**
 * Sign a file using signtool.
 * @param args Arguments to pass to signtool.
 * @returns A promise that resolves when the file is signed.
 */
export declare function signtool(args: string[]): import("child_process").PromiseWithChild<{
    stdout: string;
    stderr: string;
}>;
export declare const warningSuppression = "const originalError=console.error;console.error=(msg,...args)=>{if(typeof msg==='string'&&msg.includes('Single executable application is an experimental feature and might change at any time')||msg.includes('Currently the require() provided to the main script embedded into single-executable applications only supports loading built-in modules.'))return;originalError(msg,...args);};";
/**
 * Replace package tokens in option values with their actual values from the cwd package.json file.
 * @param {Options} options
 * @returns A new options object with the tokens replaced.
 */
export declare function parseOptions(options: Options): Promise<{
    [key: string]: any;
}>;
